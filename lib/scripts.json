{
  "darwin": {
    "content": "#!/bin/bash\n\nset -u\nset -e\n\nget_key() {\n\n  # This expression is intentionally unquoted so that\n  # multiple lines get joined as a single one.\n  # See https://github.com/resin-io-modules/drivelist/pull/129\n  echo $(grep \"$1\" | awk -F \"  +\" '{ print $3 }')\n\n}\n\nget_until_paren() {\n  awk 'match($0, \"\\\\(|$\"){ print substr($0, 0, RSTART - 1) }'\n}\n\nDISKS=\"$(diskutil list | grep '^\\/' | get_until_paren)\"\nmount_output=\"$(mount)\"\n\nfor disk in $DISKS; do\n\n  # Ignore drives that were just unplugged\n  if ! diskinfo=\"$(diskutil info \"$disk\")\"; then\n    continue\n  fi\n\n  device=\"$(echo \"$diskinfo\" | get_key \"Device Node\")\"\n\n  # See http://superuser.com/q/631592\n  raw_device=\"${device//disk/rdisk}\"\n\n  description=\"$(echo \"$diskinfo\" | get_key \"Device / Media Name\")\"\n  volume_name=\"$(echo \"$diskinfo\" | get_key \"Volume Name\")\"\n  removable=\"$(echo \"$diskinfo\" | get_key \"Removable Media\")\"\n  protected=\"$(echo \"$diskinfo\" | get_key \"Read-Only Media\")\"\n  location=\"$(echo \"$diskinfo\" | get_key \"Device Location\")\"\n  size=\"$(echo \"$diskinfo\" | sed 's/Disk Size/Total Size/g' | get_key \"Total Size\" | cut -d '(' -f 2 | cut -d ' ' -f 1)\"\n\n  mountpoints=\"$(echo \"$mount_output\" | perl -n -e'm{^'\"${disk}\"'(s[0-9]+)? on (.*) \\(.*\\)$} && print \"$2\\n\"')\"\n\n  # Omit mounted DMG images\n  if [[ \"$description\" == \"Disk Image\" ]]; then\n    continue\n  fi\n\n  echo \"device: $device\"\n\n  if [[ $volume_name =~ .*Not\\ applicable.* ]]; then\n    echo \"description: \\\"$description\\\"\"\n  else\n    echo \"description: \\\"$volume_name - $description\\\"\"\n  fi\n\n  echo \"size: $size\"\n\n  if [[ -z \"$mountpoints\" ]]; then\n    echo \"mountpoints: []\"\n  else\n    echo \"mountpoints:\"\n    echo \"$mountpoints\" | while read -r mountpoint ; do\n      echo \"  - path: \\\"$mountpoint\\\"\"\n    done\n  fi\n\n  echo \"raw: $raw_device\"\n\n  if [[ \"$protected\" == \"Yes\" ]]; then\n    echo \"protected: True\"\n  else\n    echo \"protected: False\"\n  fi\n\n  if [[ \"$device\" == \"/dev/disk0\" ]] || \\\n     [[ ( \"$removable\" == \"No\" ) || (\"$removable\" == \"Fixed\") ]] || \\\n     [[ ( \"$location\" =~ \"Internal\" ) && ( \"$removable\" != \"Yes\" ) && ( \"$removable\" != \"Removable\" ) ]] || \\\n     echo \"$mountpoints\" | grep \"^/$\"\n  then\n    echo \"system: True\"\n  else\n    echo \"system: False\"\n  fi\n\n  echo \"\"\ndone\n",
    "originalFilename": "darwin.sh",
    "type": "text"
  },
  "linux": {
    "content": "#!/bin/bash\n\nset -u\nset -e\n\nignore_first_line() {\n  tail -n +2\n}\n\nget_uuids() {\n  /sbin/blkid -s UUID -o value \"$1\"*\n}\n\nget_mountpoints() {\n  grep \"^$1\" /proc/mounts | cut -d ' ' -f 2 | sed 's,\\\\040, ,g' | sed 's,\\\\011,\\t,g' | sed 's,\\\\012,\\\\n,g' | sed 's,\\\\134,\\\\\\\\,g'\n}\n\nDISKS=\"$(lsblk -d --output NAME | ignore_first_line)\"\n\nfor disk in $DISKS; do\n\n  # Omit loop devices and CD/DVD drives\n  if [[ $disk == loop* ]] || [[ $disk == sr* ]]; then\n    continue\n  fi\n\n  device=\"/dev/$disk\"\n  diskinfo=($(lsblk -b -d \"$device\" --output SIZE,RO,RM,MODEL | ignore_first_line))\n\n  # Omit drives for which `lsblk` failed, which means they\n  # were unplugged right after we got the list of all drives\n  if [ -z \"${diskinfo-}\" ]; then\n    continue\n  fi\n\n  size=${diskinfo[0]}\n  protected=${diskinfo[1]}\n  removable=${diskinfo[2]}\n  description=${diskinfo[*]:3}\n  mountpoints=\"$(get_mountpoints \"$device\")\"\n\n  # If we couldn't get the mount points as `/dev/$disk`,\n  # get the disk UUIDs, and check as `/dev/disk/by-uuid/$uuid`\n  if [ -z \"$mountpoints\" ]; then\n    for uuid in $(get_uuids \"$device\"); do\n      mountpoints=\"$mountpoints$(get_mountpoints \"/dev/disk/by-uuid/$uuid\")\"\n    done\n  fi\n\n  # If we couldn't get the description from `lsblk`, see if we can get it\n  # from sysfs (e.g. PCI-connected SD cards that appear as `/dev/mmcblk0`)\n  if [ -z \"$description\" ]; then\n    subdevice=\"$(echo \"$device\" | cut -d '/' -f 3)\"\n    if [ -f \"/sys/class/block/$subdevice/device/name\" ]; then\n      description=\"$(cat \"/sys/class/block/$subdevice/device/name\")\"\n    fi\n  fi\n\n  echo \"device: $device\"\n  echo \"description: \\\"$description\\\"\"\n  echo \"size: $size\"\n\n  if [ -z \"$mountpoints\" ]; then\n    echo \"mountpoints: []\"\n  else\n    echo \"mountpoints:\"\n    echo \"$mountpoints\" | while read -r mountpoint ; do\n      echo \"  - path: \\\"$mountpoint\\\"\"\n    done\n  fi\n\n  echo \"raw: $device\"\n\n  if [[ \"$protected\" == \"1\" ]]; then\n    echo \"protected: True\"\n  else\n    echo \"protected: False\"\n  fi\n\n  eval \"$(udevadm info \\\n    --query=property \\\n    --export \\\n    --export-prefix=UDEV_ \\\n    --name=\"$disk\" \\\n    | awk -F= '{gsub(\"\\\\.\",\"_\",$1); print $1 \"=\" $2}')\"\n\n  set +u\n\n  if [[ \"$removable\" == \"1\" ]] && \\\n     [[ \"$UDEV_ID_DRIVE_FLASH_SD\" == \"1\" ]] || \\\n     [[ \"$UDEV_ID_DRIVE_MEDIA_FLASH_SD\" == \"1\" ]] || \\\n     [[ \"$UDEV_ID_BUS\" == \"usb\" ]]\n  then\n    echo \"system: False\"\n  else\n    echo \"system: True\"\n  fi\n\n  set -u\n\n  # Unset UDEV variables used above to prevent them from\n  # being interpreted as properties of another drive\n  unset UDEV_ID_DRIVE_FLASH_SD\n  unset UDEV_ID_DRIVE_MEDIA_FLASH_SD\n  unset UDEV_ID_BUS\n\n  echo \"\"\ndone\n",
    "originalFilename": "linux.sh",
    "type": "text"
  }
}

{
  "linux": {
    "content": "#!/bin/bash\n\nset -u\nset -e\n\nignore_first_line() {\n  tail -n +2\n}\n\nget_uuids() {\n  /sbin/blkid -s UUID -o value \"$1\"*\n}\n\nget_mountpoints() {\n  grep \"^$1\" /proc/mounts | cut -d ' ' -f 2 | sed 's,\\\\040, ,g' | sed 's,\\\\011,\\t,g' | sed 's,\\\\012,\\\\n,g' | sed 's,\\\\134,\\\\\\\\,g'\n}\n\nDISKS=\"$(lsblk -d --output NAME | ignore_first_line)\"\n\nfor disk in $DISKS; do\n\n  # Omit loop devices and CD/DVD drives\n  if [[ $disk == loop* ]] || [[ $disk == sr* ]]; then\n    continue\n  fi\n\n  device=\"/dev/$disk\"\n  diskinfo=($(lsblk -b -d \"$device\" --output SIZE,RO,RM,MODEL | ignore_first_line))\n\n  # Omit drives for which `lsblk` failed, which means they\n  # were unplugged right after we got the list of all drives\n  if [ -z \"${diskinfo-}\" ]; then\n    continue\n  fi\n\n  size=${diskinfo[0]}\n  protected=${diskinfo[1]}\n  removable=${diskinfo[2]}\n  description=${diskinfo[*]:3}\n  mountpoints=\"$(get_mountpoints \"$device\")\"\n\n  # If we couldn't get the mount points as `/dev/$disk`,\n  # get the disk UUIDs, and check as `/dev/disk/by-uuid/$uuid`\n  if [ -z \"$mountpoints\" ]; then\n    for uuid in $(get_uuids \"$device\"); do\n      mountpoints=\"$mountpoints$(get_mountpoints \"/dev/disk/by-uuid/$uuid\")\"\n    done\n  fi\n\n  # If we couldn't get the description from `lsblk`, see if we can get it\n  # from sysfs (e.g. PCI-connected SD cards that appear as `/dev/mmcblk0`)\n  if [ -z \"$description\" ]; then\n    subdevice=\"$(echo \"$device\" | cut -d '/' -f 3)\"\n    if [ -f \"/sys/class/block/$subdevice/device/name\" ]; then\n      description=\"$(cat \"/sys/class/block/$subdevice/device/name\")\"\n    fi\n  fi\n\n  echo \"enumerator: lsblk\"\n  echo \"busType: UNKNOWN\"\n  echo \"busVersion: \\\"0.0\\\"\"\n  echo \"device: $device\"\n  echo \"raw: $device\"\n  echo \"description: \\\"$description\\\"\"\n  echo \"error: null\"\n  echo \"size: $size\"\n  echo \"blockSize: null\"\n  echo \"logicalBlockSize: null\"\n\n  if [ -z \"$mountpoints\" ]; then\n    echo \"mountpoints: []\"\n  else\n    echo \"mountpoints:\"\n    echo \"$mountpoints\" | while read -r mountpoint ; do\n      echo \"  - path: \\\"$mountpoint\\\"\"\n    done\n  fi\n\n  if [[ \"$protected\" == \"1\" ]]; then\n    echo \"isReadOnly: True\"\n  else\n    echo \"isReadOnly: False\"\n  fi\n\n  eval \"$(udevadm info \\\n    --query=property \\\n    --export \\\n    --export-prefix=UDEV_ \\\n    --name=\"$disk\" \\\n    | awk -F= '{gsub(\"\\\\.\",\"_\",$1); print $1 \"=\" $2}')\"\n\n  set +u\n\n  if [[ \"$removable\" == \"1\" ]] && \\\n     [[ \"$UDEV_ID_DRIVE_FLASH_SD\" == \"1\" ]] || \\\n     [[ \"$UDEV_ID_DRIVE_MEDIA_FLASH_SD\" == \"1\" ]] || \\\n     [[ \"$UDEV_ID_BUS\" == \"usb\" ]]\n  then\n    echo \"isSystem: False\"\n  else\n    echo \"isSystem: True\"\n  fi\n\n  echo \"isVirtual: null\"\n  echo \"isRemovable: null\"\n  echo \"isCard: null\"\n  echo \"isSCSI: null\"\n  echo \"isUSB: null\"\n  echo \"isUAS: null\"\n\n  set -u\n\n  # Unset UDEV variables used above to prevent them from\n  # being interpreted as properties of another drive\n  unset UDEV_ID_DRIVE_FLASH_SD\n  unset UDEV_ID_DRIVE_MEDIA_FLASH_SD\n  unset UDEV_ID_BUS\n\n  echo \"\"\ndone\n",
    "originalFilename": "linux.sh",
    "type": "text"
  }
}